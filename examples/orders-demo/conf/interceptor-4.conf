morphlines: [
  {
    id: morphline1

    importCommands: ["org.kitesdk.**", "com.stratio.ingestion.morphline.**"]

    commands: [
//      { logWarn { format : "INPUUUUUUUUUUUUUUUUUUUUUUUUUUT record: {}", args : ["@{}"] } }

      // { readLine { charset : UTF-8 } }

//      { addValuesIfAbsent {
//        bodybak : "@{_attachment_body}"
//      }
//      }
      { readJson: {} }

      {
        extractJsonPaths {
          flatten : true
          paths : {
            order_id: /order_id
            timestamp: /timestamp
            client_id: /client_id
            payment_method: /payment_method
            latitude: /latitude
            longitude: /longitude
            credit_card: /credit_card
            shopping_center: /shopping_center
            employee: /employee
            total_amount: /total_amount
            lines: "/lines[]"
          }
        }
      }


//      { setValues { _attachment_body : [foo] } }
//      { java { code: """
//        record.replaceValues("_attachment_body",   record.getFirstValue("_attachment_body").toString().getBytes(Charsets.UTF_8));
//        return child.process(record);
//        """
//        } }

      //Cities and countries
      { logDebug { format : "TRANSFORMATIOOOOOOOOOOOOON: Setting cities and countries {}", args : ["@{client_id}"] } }
      {setValues {

        city: "Sevilla, Salamanca, Valencia, Barcelona, Madrid, Rome, Paris, Online, Offline"
        country: "SPAIN, SPAIN, SPAIN, SPAIN, SPAIN, ITALY, FRANCE"

      } }

      // Copying simple fields to headers
      {
        if {
          conditions: [

            { not {equals {order_id: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                order_id: "@{order_id}"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            { not {equals {client_id: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                client_id: "@{client_id}"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {not {equals {payment_method: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                payment_method: "@{payment_method}"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {not {equals {latitude: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                latitude: "@{latitude}"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {not {equals {longitude: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                longitude: "@{longitude}"
              }
            }
          ]
        }
      }
      {
        if {
          conditions: [
            {not {equals {employee: [null]}}}
          ]
          then: [
            {
              addValuesIfAbsent {
                employee: "@{employee}"
              }
            }
          ]
        }
      }

      //If Lines is included it fails (more than one record error)
      {
        if {
          conditions : [
            { not {equals { lines : [null]}}}
          ]
          then : [
            {
              addValuesIfAbsent{
                lines : "@{lines}"
              }
            }
          ]
        }
      }



//      {
//        findReplace {
//          field : credit_card
//          pattern : """ """
//          isRegex : true
//          replacement : ""
//        }
//      }
//
//      // Setting channel & city fields
      {
        if {
          conditions: [
            { not {equals {shopping_center: [null]}}}
          ]
          then: [
            {
              if {
                conditions: [
                  {equals {shopping_center: [Online]}}
                ]
                then: [
                  {
                    addValuesIfAbsent {
                      channel: [ONLINE]
                      city: "Madrid"
                    }
                  }
                ]
                else : [
                  {
                    if {
                      conditions : [
                        { equals { shopping_center : [Offline] } }
                      ]
                      then : [
                        { addValuesIfAbsent{
                          channel: [OFFLINE]
                          city: "Madrid"
                        } }
                      ]
                      else : [
                        { addValuesIfAbsent{
                          channel: [OFFLINE]
                          city: "@{shopping_center}"
                        } }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }

      {removeFields : {
        blacklist: ["literal:_attachment_body", "literal:_attachment_mimetype", "literal:flume.client.log4j.log.level" ,
          "literal:flume.client.log4j.logger.name", "literal:flume.client.log4j.message.encoding", "literal:flume.client.log4j.timestamp",
          "literal:timestamp", "literal:total_amount", "literal:lines"]
        //        whitelist: ["regex:_attachment_body", "literal:_attachment_body", "glob:_attachment_body"]
        whitelist: ["literal:client_id", "literal:credit_card", "literal:employee", "literal:longitude", "literal:city",
          "literal:country", "literal:latitude", "literal:payment_method", "literal:shopping_center",
          "literal:order_id", "literal:channel"]
      }}
//
//      {
//        findReplace {
//          field : credit_card
//          pattern : """ """
//          isRegex : true
//          replacement : ""
//        }
//      }


      //timestamp
//      {
//        if {
//          conditions: [
//            { not {equals {timestamp: [null]}}}
//          ]
//          then: [
//            {logDebug {format: "TRANSFORMATIOOOOOOOOOOOOOOOOOOOOOON: Setting timestamp {}", args: ["@{timestamp}"]}}
//            {
//              convertTimestamp {
//                field : timestamp
//                inputFormats : ["yyyy-MM-dd HH:mm:ss"]
//                inputTimezone : Europe/Madrid
//                outputFormat : "yyyy-MM-dd HH:mm:ss"
//                outputTimezone : UTC
//              }
//            }
//          ]
//        }
//      }
//
      //LINES AND DATEFORMAT
//      {
//        java {
//          imports : """
//            import com.fasterxml.jackson.databind.JsonNode;
//            import com.fasterxml.jackson.databind.ObjectMapper;
//            import org.kitesdk.morphline.base.Fields;
//            import java.util.*;
//            import java.text.DateFormat;
//            import java.text.SimpleDateFormat;
//            import java.math.BigInteger;
//            import java.io.ByteArrayInputStream;
//            import java.util.Calendar;
//import java.util.HashMap;
//import java.util.Map;
//import java.util.TimeZone;
//            """
//          code : """
//
//            // Json Fields name
//            String ORDER_ID= "order_id";
//            String TIMESTAMP= "timestamp";
//            String DAY_TIME_ZONE= "day_time_zone";
//            String CLIENT_ID= "client_id";
//            String PAYMENT_METHOD= "payment_method";
//            String LATITUDE= "latitude";
//            String LONGITUDE= "longitude";
//            String CREDIT_CARD= "credit_card";
//            String SHOPPING_CENTER= "shopping_center";
//            String CHANNEL= "channel";
//            String CITY= "city";
//            String COUNTRY= "country";
//            String EMPLOYEE= "employee";
//            String TOTAL_AMOUNT= "total_amount";
//            String TOTAL_PRODUCTS= "total_products";
//            String ORDER_SIZE= "order_size";
//            String LINES= "lines";
//
//
//            // Transformation rules values
//            //String DATE_FORMAT= "yyyy-MM-dd'T'HH:mm:ss XXX";
//            String DATE_FORMAT= "yyyy-MM-dd HH:mm:ss";
//            int MORNING_THRESHOLD= 13;
//            int AFTERNOON_THRESHOLD= 21;
//            Double ORDER_SIZE_SMALL_THRESHOLD= 50.0;
//            Double ORDER_SIZE_MEDIUM_THRESHOLD= 200.0;
//
//            Map<String,String> LIST_BODY= new HashMap<String, String>();
//            // City - Country mapping
//            Map<String,String> LIST_COUNTRIES= new HashMap<String, String>();
//            LIST_COUNTRIES.put("Sevilla", "SPAIN");
//            LIST_COUNTRIES.put("Salamanca", "SPAIN");
//            LIST_COUNTRIES.put("Valencia", "SPAIN");
//            LIST_COUNTRIES.put("Barcelona", "SPAIN");
//            LIST_COUNTRIES.put("Madrid", "SPAIN");
//            LIST_COUNTRIES.put("Rome", "ITALY");
//            LIST_COUNTRIES.put("Paris", "FRANCE");
//            LIST_COUNTRIES.put("Online", "SPAIN");
//            LIST_COUNTRIES.put("Offline", "SPAIN");
//
//            ObjectMapper objectMapper = new ObjectMapper();
//
//
//            try {
//
////                JsonNode rootNode= objectMapper.readTree(record.getFirstValue(Fields.MESSAGE).toString());
//                JsonNode rootNode = (JsonNode) record.getFirstValue(Fields.MESSAGE); // Fields.ATTACHMENT_BODY
//
//                logger.debug("My INPUT TEXT IS: {}", rootNode.toString());
//
//                // Copying simple fields to headers
//                if (rootNode.has(ORDER_ID))
//                    record.put(ORDER_ID, rootNode.get(ORDER_ID).asText());
//                if (rootNode.has(CLIENT_ID))
//                    record.put(CLIENT_ID, rootNode.get(CLIENT_ID).asInt());
//                if (rootNode.has(PAYMENT_METHOD))
//                    record.put(PAYMENT_METHOD, rootNode.get(PAYMENT_METHOD).asText());
//                if (rootNode.has(LATITUDE))
//                    record.put(LATITUDE, rootNode.get(LATITUDE).asDouble());
//                if (rootNode.has(LONGITUDE))
//                    record.put(LONGITUDE, rootNode.get(LONGITUDE).asDouble());
//                if (rootNode.has(EMPLOYEE))
//                    record.put(EMPLOYEE, rootNode.get(EMPLOYEE).asInt());
//                if (rootNode.has(LINES))
//                    record.put(LINES, rootNode.get(LINES).toString());
//
//
//                if (rootNode.has(SHOPPING_CENTER))  {
//                    String shoppingCenter= rootNode.get(SHOPPING_CENTER).asText();
//                    if (shoppingCenter.equals("Online")) {
//                        record.put(CHANNEL, "ONLINE");
//                        record.put(CITY, "Madrid");
//                        LIST_BODY.put(CHANNEL, "ONLINE");
//                        LIST_BODY.put(CITY, "Madrid");
//
//                    } else if (shoppingCenter.equals("Offline")) {
//                        record.put(CHANNEL, "OFFLINE");
//                        record.put(CITY, "Madrid");
//                        LIST_BODY.put(CHANNEL, "OFFLINE");
//                        LIST_BODY.put(CITY, "Madrid");
//
//                    }   else    {
//                        record.put(CHANNEL, "OFFLINE");
//                        record.put(CITY, shoppingCenter);
//                        LIST_BODY.put(CHANNEL, "OFFLINE");
//                        LIST_BODY.put(CITY, shoppingCenter);
//                    }
//
//
//
//                    record.put(SHOPPING_CENTER, shoppingCenter);
//                    record.put(COUNTRY, LIST_COUNTRIES.get( record.getFirstValue(CITY)));
//
//                    LIST_BODY.put(SHOPPING_CENTER, shoppingCenter);
//                    LIST_BODY.put(COUNTRY, LIST_COUNTRIES.get( record.getFirstValue(CITY)));
//                }
//
//                if (rootNode.has(TIMESTAMP))  {
//                    record.put(TIMESTAMP, rootNode.get(TIMESTAMP).asText());
//                    DateFormat df = new SimpleDateFormat(DATE_FORMAT);
//                    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Madrid"));
//                    cal.setTime(df.parse(rootNode.get(TIMESTAMP).asText()));
//                    int hourOfDay= cal.get(Calendar.HOUR_OF_DAY);
//                    if (hourOfDay < MORNING_THRESHOLD)  {
//                        record.put(DAY_TIME_ZONE, "morning");
//                        LIST_BODY.put(DAY_TIME_ZONE, "morning");
//                    } else if (hourOfDay < AFTERNOON_THRESHOLD) {
//                        record.put(DAY_TIME_ZONE, "afternoon");
//                        LIST_BODY.put(DAY_TIME_ZONE, "afternoon");
//                    } else  {
//                        record.put(DAY_TIME_ZONE, "noon");
//                        LIST_BODY.put(DAY_TIME_ZONE, "noon");
//                    }
//
//                    //LIST_BODY.put(DAY_TIME_ZONE, record.get(DAY_TIME_ZONE));
//                }
//
//                if (rootNode.has(LINES))  {
//                    JsonNode listElements= objectMapper.readTree(rootNode.get(LINES).toString());
//                    record.put(TOTAL_PRODUCTS, listElements.size());
//                    LIST_BODY.put(TOTAL_PRODUCTS,  Integer.toString(listElements.size()));
//                }
//
//                if (rootNode.has(TOTAL_AMOUNT))  {
//                    Double totalAmount= rootNode.get(TOTAL_AMOUNT).asDouble();
//                    record.put(TOTAL_AMOUNT, rootNode.get(TOTAL_AMOUNT).asDouble());
//                    if (totalAmount < ORDER_SIZE_SMALL_THRESHOLD)   {
//                        record.put(ORDER_SIZE, "SMALL");
//                        LIST_BODY.put(ORDER_SIZE, "SMALL");
//                    } else if (totalAmount < ORDER_SIZE_MEDIUM_THRESHOLD) {
//                        record.put(ORDER_SIZE, "MEDIUM");
//                        LIST_BODY.put(ORDER_SIZE, "MEDIUM");
//                    } else {
//                        record.put(ORDER_SIZE, "BIG");
//                        LIST_BODY.put(ORDER_SIZE, "BIG");
//                    }
//
//                }
//
//                if (rootNode.has(CREDIT_CARD))  {
//                    String originalCreditCard= rootNode.get(CREDIT_CARD).asText();
//                    BigInteger creditCard= new BigInteger(originalCreditCard.replaceAll("[^0-9]",""));
//                    record.put(CREDIT_CARD, creditCard);
//                }
//
//                String jsonLine= rootNode.toString().trim();
//                jsonLine = jsonLine.substring(0, jsonLine.length()-1);
//
//                for (String key: LIST_BODY.keySet())    {
//                    jsonLine += ", \""+ key + "\": \"" + LIST_BODY.get(key) + "\"";
//                }
//                //for (String key: LIST_BODY.keySet())    {
//
//                //Set<String> keys= LIST_BODY.keySet();
//                //Iterator itr= keys.iterator();
//                //while (itr.hasNext())   {
//                //    String key= (String) itr.next();
//                //    jsonLine += ", \""+ key + "\": \"" + LIST_BODY.get(key) + "\"";
//                //}
//
//                jsonLine += "}";
//
//                logger.info("------> JSON LINE: " + jsonLine);
//
//                record.put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(jsonLine.getBytes()));
//
//            } catch (java.io.IOException e) {
//		e.printStackTrace();
//            } catch (java.text.ParseException e) {
//		e.printStackTrace();
//            } catch (Exception e) {
//		e.printStackTrace();
//            }
//
//
//            //logger.info("My output record: {}", record);
//            return child.process(record);
//            """
//        }
//      }

      //TOTAL_AMOUNT
      //doesn't exists something like "<" or "minor" in KITE SDK
//      {
//        if{
//          conditions: [
//            { not {equals {total_amount: null}}}
//          ]
//          then: [
//            {addValues{
//                total_amount: "@{total_amount}"
//              }}
//            {
//              if{
//                conditions: [
//                  {minor {total_amount: 50.0}}
//                ]
//                then: [
//                  {logDebug {format: "TRANSFORMATION: Setting total amount []", args: ["@{}"]}}
//                  {addValues{
//                    ORDER_SIZE: "SMALL"
//                  }}
//                ]
//                else : [
//                  {
//                    if {
//                      conditions: [
//                        {minor {total_amount: 200.0}}
//                      ]
//                      then : [
//                        { logDebug { format : "TRANSFORMATION: Setting total amount {}", args : ["@{}"] } }
//                        { addValues{
//                          ORDER_SIZE: "MEDIUM"
//                        } }
//                      ]
//                      else : [
//                        { logDebug { format : "TRANSFORMATION: Setting total amount {}", args : ["@{}"] } }
//                        { addValues{
//                          ORDER_SIZE: "BIG"
//                        } }
//                      ]
//                    }
//                  }
//                ]
//              }
//            }
//          ]
//        }
//      }

      // country
      // total_products
      // order_size
      // day_time_zone


      { logWarn { format : "OUTPUT record: {}", args : ["@{}"] } }




    ]
  }
]
