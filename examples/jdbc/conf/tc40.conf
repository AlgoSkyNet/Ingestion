# Copyright 2013 Cloudera Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**"]
    commands : [
      {
        readLine {
          charset : UTF-8
        }
      }

      {setValues { process : [not_process]}}

      {
        toString {
          field : message
          trim: true
        }
      }

      {
        if {
          conditions: [
            {
              grok {
                expressions: {
                  message: ("""^"International""")
                }
                extract: true
                findSubstrings: true
              }
            }
          ]
          then: [
            {setValues { process : [process]}}
          ]
        }
      }

      {
        if {
          conditions: [
            {
              grok {
                expressions: {
                  message: ("""^"Domestic""")
                }
                extract : true
                findSubstrings: true
              }
            }
          ]
          then: [
            {setValues { process : [process]}}
          ]
        }
      }

      {
        if {
          conditions: [
            {equals {process: [process]}}
          ]
          then: [
            {
              findReplace {
                field: message
                pattern: "Not Applicable"
                isRegex: true
                replacement: "N/A"
                replaceFirst: false
              }
            }
            {
              findReplace {
                field: message
                pattern: "NOT APPLICABLE"
                isRegex: true
                replacement: "N/A"
                replaceFirst: false
              }
            }
            {
              findReplace {
                field: message
                pattern: ",,"
                isRegex: true
                replacement: ","
                replaceFirst: false
              }
            }
            {
              split {
                inputField: message
                outputFields : [dom_int_merchant,tier_merchant,account_number,account_sequence_number,
                  account_number_extension,fraud_type,fraud_invest_status_id,fraud_type_group,card_capability,
                  convention_charback,notification_code,transaction_id_exclusion_reason,transaction_id,
                  cashback_indicator,issuer_generated_authorization,on_us_indicator,issuer_bid,issuer_bin,
                  issuer_country,issuer_priority_market,issuer_region,issuer_region_group,mcc_id,mcc,
                  merchant_city_id,merchant_country_desc,merchant_name,merchant_postal_code,merchant_state_prov,
                  merchant_region,card_acceptor,term_id,channel,pos_entry_mode,moto_eci,pos_terminal_capability,
                  cat_indicator,card_holder_method,network_id,purchase_date,fraud_post_date,fraud_maintenance_date,
                  acquirer_bid,acquirer_bin,arn,acquirer_region,acquirer_country,acquirer_region_group,
                  authorization_cd,authorization_response_code_auth,avs_result_code_auth,cavv_result_code_auth,
                  chip_condition_code_auth,chip_transaction_indicator_auth,cpd_date_auth,cvv_result_code_auth,
                  cvv2_presence_indicator_auth,cvv2_response_type_auth,cvv2_result_code_auth,merchant_postal_code_auth,
                  moto_eci_auth,pos_condition_code_auth,pos_terminal_capability_auth,pos_terminal_type_auth,
                  service_code_auth,service_development_code_auth,terminal_capability_profile_auth,
                  authorization_response_code_cs,avs_result_code_cs,chip_condition_code_cs,collection_flag_cs,
                  cvv2_result_code_cs,reward_program_id_cs,terminal_capability_profile_cs,currency_code,
                  product_id_subtype_cs,product_id_cs,product_id,product_brand,product_class,product_platform,
                  account_funding_source,fraud_amount,fraud_count,fraud_amount_local_currency,ingestion_date]
			    separator : "\",\""
              }
            }
            {
              addCurrentTime {
                field: ingestion_date
              }
            }
            {
              convertTimestamp {
                field: ingestion_date
                inputFormats: ["unixTimeInMillis"]
                inputTimezone: UTC
                outputFormat: "yyyy-MM-dd HH:mm:ss"
                outputTimezone: Europe/Madrid
              }
            }
            {
              findReplace {
                field: fraud_amount_local_currency
                pattern: "\""
                isRegex: true
                replacement: ""
                replaceFirst: false
              }
            }

            {
              findReplace {
                field: dom_int_merchant
                pattern: "\""
                isRegex: true
                replacement: ""
                replaceFirst: false
              }
            }

            {
              convertTimestamp {
                field : purchase_date,
                inputFormats : ["MM/dd/yyyy","M/dd/yyyy","yyyy-MM-dd"]
                inputTimezone : UTC
                outputFormat : "yyyy-MM-dd"
                outputTimezone : UTC
              }
            }
            {
              convertTimestamp {
                field : fraud_post_date,
                inputFormats : ["MM/dd/yyyy","M/dd/yyyy","yyyy-MM-dd"]
                inputTimezone : UTC
                outputFormat : "yyyy-MM-dd"
                outputTimezone : UTC
              }
            }
            {
              convertTimestamp {
                field : fraud_maintenance_date,
                inputFormats : ["MM/dd/yyyy","M/dd/yyyy","yyyy-MM-dd"]
                inputTimezone : UTC
                outputFormat : "yyyy-MM-dd"
                outputTimezone : UTC
              }
            }
            {
              convertTimestamp {
                field : cpd_date_auth,
                inputFormats : ["MM/dd/yyyy","M/dd/yyyy","yyyy-MM-dd"]
                inputTimezone : UTC
                outputFormat : "yyyy-MM-dd"
                outputTimezone : UTC
              }
            }
            {
              findReplace {
                field: fraud_amount
                pattern: "\\$"
                isRegex: true
                replacement: ""
                replaceFirst: false
              }
            }
            {
               findReplace {
                 field: fraud_amount
                 pattern: ","
                 isRegex: true
                 replacement: ""
                 replaceFirst: false
               }
            }

            {
               findReplace {
                 field: fraud_amount_local_currency
                 pattern: ","
                 isRegex: true
                 replacement: ""
                 replaceFirst: false
               }
            }
	    { logDebug { format : "---> OUTPUT: {}", args : ["@{}"] } }
          ]
          else: [
            { dropRecord {} }
          ]
        }
      }


    ]
  }
]
